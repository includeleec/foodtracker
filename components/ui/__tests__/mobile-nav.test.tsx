import React from 'react'
import { render, screen, fireEvent } from '@testing-library/react'
import { usePathname } from 'next/navigation'
import { MobileNav, BottomNav } from '../mobile-nav'

// Mock Next.js navigation
jest.mock('next/navigation', () => ({
  usePathname: jest.fn(),
}))

const mockUsePathname = usePathname as jest.MockedFunction<typeof usePathname>

const mockNavigationItems = [
  { name: 'È¶ñÈ°µ', href: '/', icon: 'üè†' },
  { name: 'ËÆ∞ÂΩï', href: '/records', icon: 'üìù' },
  { name: 'ÂéÜÂè≤', href: '/history', icon: 'üìÖ' },
]

describe('MobileNav', () => {
  beforeEach(() => {
    mockUsePathname.mockReturnValue('/')
  })

  it('renders menu button', () => {
    render(<MobileNav items={mockNavigationItems} />)
    
    const menuButton = screen.getByLabelText('ÊâìÂºÄ‰∏ªËèúÂçï')
    expect(menuButton).toBeInTheDocument()
  })

  it('opens menu when button is clicked', () => {
    render(<MobileNav items={mockNavigationItems} />)
    
    const menuButton = screen.getByLabelText('ÊâìÂºÄ‰∏ªËèúÂçï')
    fireEvent.click(menuButton)
    
    expect(screen.getByText('ËèúÂçï')).toBeInTheDocument()
    expect(screen.getByText('È¶ñÈ°µ')).toBeInTheDocument()
    expect(screen.getByText('ËÆ∞ÂΩï')).toBeInTheDocument()
    expect(screen.getByText('ÂéÜÂè≤')).toBeInTheDocument()
  })

  it('closes menu when close button is clicked', () => {
    render(<MobileNav items={mockNavigationItems} />)
    
    // ÊâìÂºÄËèúÂçï
    const menuButton = screen.getByLabelText('ÊâìÂºÄ‰∏ªËèúÂçï')
    fireEvent.click(menuButton)
    
    // ÂÖ≥Èó≠ËèúÂçï
    const closeButton = screen.getByLabelText('ÂÖ≥Èó≠ËèúÂçï')
    fireEvent.click(closeButton)
    
    // ËèúÂçïÂ∫îËØ•ÂÖ≥Èó≠ÔºàÈÄöËøátransformÊ†∑ÂºèÔºâ
    const menuPanel = screen.getByText('ËèúÂçï').closest('.fixed')
    expect(menuPanel).toHaveClass('translate-x-full')
  })

  it('closes menu when overlay is clicked', () => {
    render(<MobileNav items={mockNavigationItems} />)
    
    // ÊâìÂºÄËèúÂçï
    const menuButton = screen.getByLabelText('ÊâìÂºÄ‰∏ªËèúÂçï')
    fireEvent.click(menuButton)
    
    // ÁÇπÂáªË¶ÜÁõñÂ±Ç
    const overlay = document.querySelector('.bg-black.bg-opacity-25')
    expect(overlay).toBeInTheDocument()
    fireEvent.click(overlay!)
    
    // ËèúÂçïÂ∫îËØ•ÂÖ≥Èó≠
    const menuPanel = screen.getByText('ËèúÂçï').closest('.fixed')
    expect(menuPanel).toHaveClass('translate-x-full')
  })

  it('displays user email when provided', () => {
    const userEmail = 'test@example.com'
    render(<MobileNav items={mockNavigationItems} userEmail={userEmail} />)
    
    // ÊâìÂºÄËèúÂçï
    const menuButton = screen.getByLabelText('ÊâìÂºÄ‰∏ªËèúÂçï')
    fireEvent.click(menuButton)
    
    expect(screen.getByText('ÂΩìÂâçÁî®Êà∑')).toBeInTheDocument()
    expect(screen.getByText(userEmail)).toBeInTheDocument()
  })

  it('displays sign out button when onSignOut is provided', () => {
    const onSignOut = jest.fn()
    render(<MobileNav items={mockNavigationItems} onSignOut={onSignOut} />)
    
    // ÊâìÂºÄËèúÂçï
    const menuButton = screen.getByLabelText('ÊâìÂºÄ‰∏ªËèúÂçï')
    fireEvent.click(menuButton)
    
    const signOutButton = screen.getByText('ÈÄÄÂá∫ÁôªÂΩï')
    expect(signOutButton).toBeInTheDocument()
    
    fireEvent.click(signOutButton)
    expect(onSignOut).toHaveBeenCalled()
  })

  it('highlights active navigation item', () => {
    mockUsePathname.mockReturnValue('/records')
    render(<MobileNav items={mockNavigationItems} />)
    
    // ÊâìÂºÄËèúÂçï
    const menuButton = screen.getByLabelText('ÊâìÂºÄ‰∏ªËèúÂçï')
    fireEvent.click(menuButton)
    
    const recordsLink = screen.getByText('ËÆ∞ÂΩï').closest('a')
    expect(recordsLink).toHaveClass('bg-blue-100', 'text-blue-700')
  })
})

describe('BottomNav', () => {
  beforeEach(() => {
    mockUsePathname.mockReturnValue('/')
  })

  it('renders all navigation items', () => {
    render(<BottomNav items={mockNavigationItems} />)
    
    expect(screen.getByText('È¶ñÈ°µ')).toBeInTheDocument()
    expect(screen.getByText('ËÆ∞ÂΩï')).toBeInTheDocument()
    expect(screen.getByText('ÂéÜÂè≤')).toBeInTheDocument()
    
    // Ê£ÄÊü•ÂõæÊ†á
    expect(screen.getByText('üè†')).toBeInTheDocument()
    expect(screen.getByText('üìù')).toBeInTheDocument()
    expect(screen.getByText('üìÖ')).toBeInTheDocument()
  })

  it('highlights active navigation item', () => {
    mockUsePathname.mockReturnValue('/records')
    render(<BottomNav items={mockNavigationItems} />)
    
    const recordsLink = screen.getByText('ËÆ∞ÂΩï').closest('a')
    expect(recordsLink).toHaveClass('text-blue-600', 'bg-blue-50')
  })

  it('applies correct href to navigation links', () => {
    render(<BottomNav items={mockNavigationItems} />)
    
    const homeLink = screen.getByText('È¶ñÈ°µ').closest('a')
    const recordsLink = screen.getByText('ËÆ∞ÂΩï').closest('a')
    const historyLink = screen.getByText('ÂéÜÂè≤').closest('a')
    
    expect(homeLink).toHaveAttribute('href', '/')
    expect(recordsLink).toHaveAttribute('href', '/records')
    expect(historyLink).toHaveAttribute('href', '/history')
  })
})