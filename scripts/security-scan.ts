#!/usr/bin/env tsx
// ÂÆâÂÖ®ÊºèÊ¥ûÊâ´ÊèèËÑöÊú¨

import fs from 'fs'
import path from 'path'
import { execSync } from 'child_process'

interface SecurityIssue {
  type: 'critical' | 'high' | 'medium' | 'low' | 'info'
  category: string
  file: string
  line?: number
  message: string
  recommendation: string
}

class SecurityScanner {
  private issues: SecurityIssue[] = []
  private projectRoot: string

  constructor(projectRoot: string) {
    this.projectRoot = projectRoot
  }

  // Êâ´ÊèèÁ°¨ÁºñÁ†ÅÁöÑÊïèÊÑü‰ø°ÊÅØ
  scanHardcodedSecrets(): void {
    console.log('üîç Êâ´ÊèèÁ°¨ÁºñÁ†ÅÊïèÊÑü‰ø°ÊÅØ...')
    
    const sensitivePatterns = [
      {
        pattern: /(?:password|pwd|pass)\s*[:=]\s*['"][^'"]{8,}['"]/gi,
        message: 'ÂèëÁé∞ÂèØËÉΩÁöÑÁ°¨ÁºñÁ†ÅÂØÜÁ†Å',
        type: 'critical' as const
      },
      {
        pattern: /(?:api[_-]?key|apikey|secret[_-]?key)\s*[:=]\s*['"][^'"]{16,}['"]/gi,
        message: 'ÂèëÁé∞ÂèØËÉΩÁöÑÁ°¨ÁºñÁ†Å API ÂØÜÈí•',
        type: 'critical' as const
      },
      {
        pattern: /(?:token|jwt)\s*[:=]\s*['"][^'"]{20,}['"]/gi,
        message: 'ÂèëÁé∞ÂèØËÉΩÁöÑÁ°¨ÁºñÁ†Å‰ª§Áâå',
        type: 'high' as const
      },
      {
        pattern: /(?:database|db)[_-]?(?:url|uri|connection)\s*[:=]\s*['"][^'"]+['"]/gi,
        message: 'ÂèëÁé∞ÂèØËÉΩÁöÑÁ°¨ÁºñÁ†ÅÊï∞ÊçÆÂ∫ìËøûÊé•Â≠óÁ¨¶‰∏≤',
        type: 'high' as const
      }
    ]

    this.scanFiles(['.ts', '.tsx', '.js', '.jsx', '.json'], (filePath, content) => {
      sensitivePatterns.forEach(({ pattern, message, type }) => {
        const matches = content.matchAll(pattern)
        for (const match of matches) {
          // Ë∑≥ËøáÊµãËØïÊñá‰ª∂ÂíåÁ§∫‰æãÊñá‰ª∂
          if (filePath.includes('test') || filePath.includes('example') || filePath.includes('.env.example')) {
            continue
          }

          this.addIssue({
            type,
            category: 'Hardcoded Secrets',
            file: filePath,
            message,
            recommendation: '‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèÊàñÂÆâÂÖ®ÁöÑÂØÜÈí•ÁÆ°ÁêÜÁ≥ªÁªüÂ≠òÂÇ®ÊïèÊÑü‰ø°ÊÅØ'
          })
        }
      })
    })
  }

  // Êâ´Êèè‰∏çÂÆâÂÖ®ÁöÑ‰æùËµñ
  scanDependencies(): void {
    console.log('üîç Êâ´Êèè‰æùËµñÂÆâÂÖ®ÊºèÊ¥û...')
    
    try {
      const packageJsonPath = path.join(this.projectRoot, 'package.json')
      if (fs.existsSync(packageJsonPath)) {
        // ËøêË°å npm audit
        try {
          execSync('npm audit --audit-level=moderate --json', { 
            cwd: this.projectRoot,
            stdio: 'pipe'
          })
        } catch (error: any) {
          if (error.stdout) {
            const auditResult = JSON.parse(error.stdout.toString())
            if (auditResult.vulnerabilities) {
              Object.entries(auditResult.vulnerabilities).forEach(([pkg, vuln]: [string, any]) => {
                this.addIssue({
                  type: this.mapSeverity(vuln.severity),
                  category: 'Dependency Vulnerability',
                  file: 'package.json',
                  message: `‰æùËµñ ${pkg} Â≠òÂú® ${vuln.severity} Á∫ßÂà´ÂÆâÂÖ®ÊºèÊ¥û: ${vuln.title}`,
                  recommendation: `ËøêË°å npm audit fix ÊàñÊõ¥Êñ∞Âà∞ÂÆâÂÖ®ÁâàÊú¨`
                })
              })
            }
          }
        }
      }
    } catch (error) {
      console.warn('Êó†Ê≥ïËøêË°å‰æùËµñÂÆâÂÖ®Êâ´Êèè:', error)
    }
  }

  // Êâ´Êèè‰∏çÂÆâÂÖ®ÁöÑ‰ª£Á†ÅÊ®°Âºè
  scanUnsafePatterns(): void {
    console.log('üîç Êâ´Êèè‰∏çÂÆâÂÖ®ÁöÑ‰ª£Á†ÅÊ®°Âºè...')
    
    const unsafePatterns = [
      {
        pattern: /eval\s*\(/gi,
        message: '‰ΩøÁî®‰∫Ü eval() ÂáΩÊï∞ÔºåÂ≠òÂú®‰ª£Á†ÅÊ≥®ÂÖ•È£éÈô©',
        type: 'critical' as const,
        recommendation: 'ÈÅøÂÖç‰ΩøÁî® eval()Ôºå‰ΩøÁî®Êõ¥ÂÆâÂÖ®ÁöÑÊõø‰ª£ÊñπÊ°à'
      },
      {
        pattern: /innerHTML\s*=\s*[^;]+[+]/gi,
        message: 'Âä®ÊÄÅËÆæÁΩÆ innerHTML ÂèØËÉΩÂØºËá¥ XSS ÊîªÂáª',
        type: 'high' as const,
        recommendation: '‰ΩøÁî® textContent ÊàñÁªèËøáÊ∏ÖÁêÜÁöÑ HTML'
      },
      {
        pattern: /document\.write\s*\(/gi,
        message: '‰ΩøÁî® document.write() ÂèØËÉΩÂØºËá¥ XSS ÊîªÂáª',
        type: 'high' as const,
        recommendation: '‰ΩøÁî®Áé∞‰ª£ DOM Êìç‰ΩúÊñπÊ≥ï'
      },
      {
        pattern: /dangerouslySetInnerHTML/gi,
        message: '‰ΩøÁî® dangerouslySetInnerHTML Â≠òÂú® XSS È£éÈô©',
        type: 'medium' as const,
        recommendation: 'Á°Æ‰øùÂÜÖÂÆπÂ∑≤ÁªèËøáÈÄÇÂΩìÁöÑÊ∏ÖÁêÜÂíåÈ™åËØÅ'
      },
      {
        pattern: /Math\.random\(\)/gi,
        message: 'Math.random() ‰∏çÈÄÇÁî®‰∫éÂÆâÂÖ®Áõ∏ÂÖ≥ÁöÑÈöèÊú∫Êï∞ÁîüÊàê',
        type: 'medium' as const,
        recommendation: 'ÂØπ‰∫éÂÆâÂÖ®Áî®ÈÄîÔºå‰ΩøÁî® crypto.getRandomValues()'
      }
    ]

    this.scanFiles(['.ts', '.tsx', '.js', '.jsx'], (filePath, content) => {
      unsafePatterns.forEach(({ pattern, message, type, recommendation }) => {
        const matches = content.matchAll(pattern)
        for (const match of matches) {
          this.addIssue({
            type,
            category: 'Unsafe Code Pattern',
            file: filePath,
            message,
            recommendation
          })
        }
      })
    })
  }

  // Êâ´ÊèèÁº∫Â§±ÁöÑÂÆâÂÖ®Â§¥ÈÉ®
  scanSecurityHeaders(): void {
    console.log('üîç Êâ´ÊèèÂÆâÂÖ®Â§¥ÈÉ®ÈÖçÁΩÆ...')
    
    const requiredHeaders = [
      'X-XSS-Protection',
      'X-Content-Type-Options',
      'X-Frame-Options',
      'Strict-Transport-Security',
      'Content-Security-Policy'
    ]

    // Ê£ÄÊü• Next.js ÈÖçÁΩÆ
    const nextConfigPath = path.join(this.projectRoot, 'next.config.ts')
    if (fs.existsSync(nextConfigPath)) {
      const content = fs.readFileSync(nextConfigPath, 'utf-8')
      
      requiredHeaders.forEach(header => {
        if (!content.includes(header)) {
          this.addIssue({
            type: 'medium',
            category: 'Missing Security Header',
            file: 'next.config.ts',
            message: `Áº∫Â∞ëÂÆâÂÖ®Â§¥ÈÉ®: ${header}`,
            recommendation: `Âú® Next.js ÈÖçÁΩÆ‰∏≠Ê∑ªÂä† ${header} Â§¥ÈÉ®`
          })
        }
      })
    }

    // Ê£ÄÊü• API Ë∑ØÁî±ÊòØÂê¶ËÆæÁΩÆ‰∫ÜÂÆâÂÖ®Â§¥ÈÉ®
    this.scanFiles(['.ts'], (filePath, content) => {
      if (filePath.includes('/api/') && content.includes('NextResponse')) {
        const hasSecurityHeaders = requiredHeaders.some(header => 
          content.includes(header) || content.includes('getSecurityHeaders')
        )
        
        if (!hasSecurityHeaders) {
          this.addIssue({
            type: 'medium',
            category: 'Missing Security Header',
            file: filePath,
            message: 'API Ë∑ØÁî±Áº∫Â∞ëÂÆâÂÖ®Â§¥ÈÉ®',
            recommendation: 'Âú® API ÂìçÂ∫î‰∏≠Ê∑ªÂä†ÂÆâÂÖ®Â§¥ÈÉ®'
          })
        }
      }
    })
  }

  // Êâ´ÊèèËÆ§ËØÅÂíåÊéàÊùÉÈóÆÈ¢ò
  scanAuthIssues(): void {
    console.log('üîç Êâ´ÊèèËÆ§ËØÅÂíåÊéàÊùÉÈóÆÈ¢ò...')
    
    this.scanFiles(['.ts', '.tsx'], (filePath, content) => {
      // Ê£ÄÊü•ÊòØÂê¶ÊúâÊú™‰øùÊä§ÁöÑ API Ë∑ØÁî±
      if (filePath.includes('/api/') && content.includes('export async function')) {
        if (!content.includes('auth') && !content.includes('validateUser')) {
          this.addIssue({
            type: 'high',
            category: 'Missing Authentication',
            file: filePath,
            message: 'API Ë∑ØÁî±ÂèØËÉΩÁº∫Â∞ëË∫´‰ªΩÈ™åËØÅ',
            recommendation: 'Á°Æ‰øùÊâÄÊúâÊïèÊÑü API Ë∑ØÁî±ÈÉΩÊúâÈÄÇÂΩìÁöÑË∫´‰ªΩÈ™åËØÅ'
          })
        }
      }

      // Ê£ÄÊü•ÊòØÂê¶ÊúâÁ°¨ÁºñÁ†ÅÁöÑÁî®Êà∑ËßíËâ≤ÊàñÊùÉÈôê
      if (/role\s*[:=]\s*['"]admin['"]|isAdmin\s*[:=]\s*true/gi.test(content)) {
        this.addIssue({
          type: 'medium',
          category: 'Hardcoded Authorization',
          file: filePath,
          message: 'ÂèëÁé∞Á°¨ÁºñÁ†ÅÁöÑÁî®Êà∑ËßíËâ≤ÊàñÊùÉÈôê',
          recommendation: '‰ΩøÁî®Âä®ÊÄÅÁöÑÊùÉÈôêÊ£ÄÊü•Á≥ªÁªü'
        })
      }
    })
  }

  // Êâ´Êèè SQL Ê≥®ÂÖ•È£éÈô©
  scanSqlInjection(): void {
    console.log('üîç Êâ´Êèè SQL Ê≥®ÂÖ•È£éÈô©...')
    
    this.scanFiles(['.ts', '.tsx'], (filePath, content) => {
      // Ê£ÄÊü•Â≠óÁ¨¶‰∏≤ÊãºÊé•ÁöÑ SQL Êü•ËØ¢
      const sqlPatterns = [
        /['"`]\s*\+\s*[^+]+\s*\+\s*['"`]/g, // Â≠óÁ¨¶‰∏≤ÊãºÊé•
        /\$\{[^}]+\}/g // Ê®°ÊùøÂ≠óÁ¨¶‰∏≤ÊèíÂÄº
      ]

      sqlPatterns.forEach(pattern => {
        if (pattern.test(content) && /SELECT|INSERT|UPDATE|DELETE/gi.test(content)) {
          this.addIssue({
            type: 'high',
            category: 'SQL Injection Risk',
            file: filePath,
            message: 'ÂèØËÉΩÂ≠òÂú® SQL Ê≥®ÂÖ•È£éÈô©ÁöÑÊü•ËØ¢ÊûÑÈÄ†',
            recommendation: '‰ΩøÁî®ÂèÇÊï∞ÂåñÊü•ËØ¢Êàñ ORM Êù•Èò≤Ê≠¢ SQL Ê≥®ÂÖ•'
          })
        }
      })
    })
  }

  // Êâ´ÊèèÊñá‰ª∂ÂíåÁõÆÂΩï
  private scanFiles(extensions: string[], callback: (filePath: string, content: string) => void): void {
    const scanDir = (dir: string): void => {
      const items = fs.readdirSync(dir)
      
      for (const item of items) {
        const fullPath = path.join(dir, item)
        const stat = fs.statSync(fullPath)
        
        if (stat.isDirectory()) {
          // Ë∑≥ËøáÊüê‰∫õÁõÆÂΩï
          if (['node_modules', '.git', '.next', 'dist', 'build'].includes(item)) {
            continue
          }
          scanDir(fullPath)
        } else if (stat.isFile()) {
          const ext = path.extname(item)
          if (extensions.includes(ext)) {
            try {
              const content = fs.readFileSync(fullPath, 'utf-8')
              const relativePath = path.relative(this.projectRoot, fullPath)
              callback(relativePath, content)
            } catch (error) {
              console.warn(`Êó†Ê≥ïËØªÂèñÊñá‰ª∂ ${fullPath}:`, error)
            }
          }
        }
      }
    }

    scanDir(this.projectRoot)
  }

  private addIssue(issue: SecurityIssue): void {
    this.issues.push(issue)
  }

  private mapSeverity(severity: string): SecurityIssue['type'] {
    switch (severity.toLowerCase()) {
      case 'critical': return 'critical'
      case 'high': return 'high'
      case 'moderate': return 'medium'
      case 'low': return 'low'
      default: return 'info'
    }
  }

  // ËøêË°åÊâÄÊúâÊâ´Êèè
  async runAllScans(): Promise<void> {
    console.log('üöÄ ÂºÄÂßãÂÆâÂÖ®Êâ´Êèè...\n')
    
    this.scanHardcodedSecrets()
    this.scanDependencies()
    this.scanUnsafePatterns()
    this.scanSecurityHeaders()
    this.scanAuthIssues()
    this.scanSqlInjection()
    
    this.generateReport()
  }

  // ÁîüÊàêÊä•Âëä
  private generateReport(): void {
    console.log('\nüìä ÂÆâÂÖ®Êâ´ÊèèÊä•Âëä')
    console.log('='.repeat(50))
    
    if (this.issues.length === 0) {
      console.log('‚úÖ Êú™ÂèëÁé∞ÂÆâÂÖ®ÈóÆÈ¢òÔºÅ')
      return
    }

    // Êåâ‰∏•ÈáçÁ®ãÂ∫¶ÂàÜÁªÑ
    const groupedIssues = this.issues.reduce((acc, issue) => {
      if (!acc[issue.type]) acc[issue.type] = []
      acc[issue.type].push(issue)
      return acc
    }, {} as Record<string, SecurityIssue[]>)

    const severityOrder: SecurityIssue['type'][] = ['critical', 'high', 'medium', 'low', 'info']
    const severityEmojis = {
      critical: 'üö®',
      high: '‚ö†Ô∏è',
      medium: '‚ö°',
      low: 'üí°',
      info: '‚ÑπÔ∏è'
    }

    let totalIssues = 0
    
    severityOrder.forEach(severity => {
      const issues = groupedIssues[severity]
      if (!issues || issues.length === 0) return
      
      console.log(`\n${severityEmojis[severity]} ${severity.toUpperCase()} (${issues.length} ‰∏™ÈóÆÈ¢ò)`)
      console.log('-'.repeat(30))
      
      issues.forEach((issue, index) => {
        console.log(`${index + 1}. [${issue.category}] ${issue.message}`)
        console.log(`   Êñá‰ª∂: ${issue.file}`)
        console.log(`   Âª∫ËÆÆ: ${issue.recommendation}`)
        console.log()
      })
      
      totalIssues += issues.length
    })

    console.log(`\nüìà ÊÄªËÆ°ÂèëÁé∞ ${totalIssues} ‰∏™ÂÆâÂÖ®ÈóÆÈ¢ò`)
    
    // ÁîüÊàê JSON Êä•Âëä
    const reportPath = path.join(this.projectRoot, 'security-report.json')
    fs.writeFileSync(reportPath, JSON.stringify({
      timestamp: new Date().toISOString(),
      totalIssues,
      issues: this.issues
    }, null, 2))
    
    console.log(`üìÑ ËØ¶ÁªÜÊä•ÂëäÂ∑≤‰øùÂ≠òÂà∞: ${reportPath}`)
    
    // Â¶ÇÊûúÊúâ‰∏•ÈáçÊàñÈ´òÂç±ÈóÆÈ¢òÔºåÈÄÄÂá∫Á†Å‰∏∫ 1
    const hasCriticalIssues = this.issues.some(issue => 
      issue.type === 'critical' || issue.type === 'high'
    )
    
    if (hasCriticalIssues) {
      console.log('\n‚ùå ÂèëÁé∞‰∏•ÈáçÂÆâÂÖ®ÈóÆÈ¢òÔºåËØ∑ÂèäÊó∂‰øÆÂ§çÔºÅ')
      process.exit(1)
    }
  }
}

// ‰∏ªÂáΩÊï∞
async function main() {
  const projectRoot = process.cwd()
  const scanner = new SecurityScanner(projectRoot)
  
  try {
    await scanner.runAllScans()
  } catch (error) {
    console.error('ÂÆâÂÖ®Êâ´ÊèèÂ§±Ë¥•:', error)
    process.exit(1)
  }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
  main()
}

export { SecurityScanner }